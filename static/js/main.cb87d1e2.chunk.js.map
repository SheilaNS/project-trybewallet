{"version":3,"sources":["actions/user.js","actions/index.js","pages/Login.js","service/quotationAPI.js","actions/wallet.js","actions/rates.js","components/Form.js","components/Table.js","pages/Wallet.js","Routes.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["recieveUserInfo","type","email","password","Login","handleChange","target","setState","name","value","state","emailOk","test","validPass","length","disabled","handleClick","getUserInfo","props","this","className","htmlFor","data-testid","id","onChange","to","onClick","React","Component","connect","dispatch","quotationAPI","a","fetch","response","data","json","fecthQuotationAPI","codes","curr","Object","keys","filter","elem","console","log","fetchQuotationToWallet","rates","ali","Form","checked","handleSubmit","event","preventDefault","getWallet","getRates","description","currency","method","tag","exchangeRates","before","onSubmit","map","index","key","wallet","currencies","recieveWalletInfo","Table","expen","handleDelete","desp","valor","Number","moeda","cambio","ask","conv","toFixed","expenses","Wallet","changeTotal","totalDep","values","code","codein","despesaTotal","i","delTask","currencie","userEmail","user","tasks","task","Routes","component","path","exact","App","INITIAL_STATE","pass","userRDC","action","walletRDC","expe","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb87d1e2.chunk.js","sourcesContent":["import { RECIEVE_USER_INFO } from '.';\n\nconst recieveUserInfo = ({ email, password }) => ({\n  type: RECIEVE_USER_INFO,\n  email,\n  password,\n});\n\nexport default recieveUserInfo;\n","// Coloque aqui suas actions\n// API\nexport const REQUEST_API = 'REQUEST_API';\nexport const RECIEVE_API_QUOTATION = 'RECIEVE_API_QUOTATION';\nexport const RECIEVE_API_RATE = 'RECIEVE_API_RATE';\nexport const RECIEVE_API_FAILURE = 'RECIEVE_API_FAILURE';\n\n// user\nexport const RECIEVE_USER_INFO = 'RECIEVE_USER_INFO';\n\n// wallet\nexport const RECIEVE_WALLET_INFO = 'RECIEVE_WALLET_INFO';\n\nexport const recieveWalletInfo = (wallet) => ({\n  type: RECIEVE_WALLET_INFO,\n  wallet,\n});\n\n// tasks\nexport const DELETE_TASK = 'DELETE_TASK';\n\nexport const deleteTask = (id) => ({\n  type: DELETE_TASK,\n  task: Number(id),\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport recieveUserInfo from '../actions/user';\nimport '../assets/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n    };\n  }\n\n  // Referência da validação do e-mail:\n  // https://www.horadecodar.com.br/2020/09/07/expressao-regular-para-validar-e-mail-javascript-regex/\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    }, () => {\n      const { password, email } = this.state;\n      const SEIS = 6;\n      const valisEmail = /\\S+@\\S+\\.\\S+/;\n      const emailOk = valisEmail.test(email);\n      const validPass = password.length >= SEIS;\n      if (emailOk && validPass) {\n        this.setState({\n          disabled: false,\n        });\n      } else {\n        this.setState({\n          disabled: true,\n        });\n      }\n    });\n  };\n\n  handleClick = () => {\n    const { getUserInfo } = this.props;\n    const { password, email } = this.state;\n    const userInfo = ({ email, password });\n    getUserInfo(userInfo);\n  }\n\n  render() {\n    const { email, password, disabled } = this.state;\n    return (\n      <div className=\"login-container\">\n        <div className=\"login\">\n          <label htmlFor=\"email\" className=\"email-login\">\n            E-mail:\n            {' '}\n            <input\n              data-testid=\"email-input\"\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"password\" className=\"senha-login\">\n            Senha:\n            {' '}\n            <input\n              data-testid=\"password-input\"\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              value={ password }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <Link to=\"/carteira\">\n            <button\n              className=\"login-btn\"\n              type=\"button\"\n              disabled={ disabled }\n              onClick={ this.handleClick }\n            >\n              Entrar\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUserInfo: (state) => dispatch(recieveUserInfo(state)),\n});\n\nLogin.propTypes = {\n  getUserInfo: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","const quotationAPI = async () => {\n  const URL = 'https://economia.awesomeapi.com.br/json/all';\n  const response = await fetch(URL);\n  const data = response.json();\n  return data;\n};\n\nexport default quotationAPI;\n","import { RECIEVE_API_QUOTATION, REQUEST_API } from '.';\nimport quotationAPI from '../service/quotationAPI';\n\nconst requestAPI = () => ({ type: REQUEST_API });\n\nconst recieveAPICurr = (codes) => {\n  const keys = Object.keys(codes).filter((elem) => elem !== 'USDT');\n  return ({\n    type: RECIEVE_API_QUOTATION,\n    curr: keys,\n  });\n};\n\nconst fecthQuotationAPI = () => async (dispatch) => {\n  try {\n    dispatch(requestAPI());\n    const data = await quotationAPI();\n    return dispatch(recieveAPICurr(data));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default fecthQuotationAPI;\n","import { RECIEVE_API_RATE, REQUEST_API } from '.';\nimport quotationAPI from '../service/quotationAPI';\n\nconst requestAPI = () => ({ type: REQUEST_API });\n\nconst recieveWalletRate = (rates) => ({\n  type: RECIEVE_API_RATE,\n  rates,\n});\n\nconst fetchQuotationToWallet = () => async (dispatch) => {\n  try {\n    dispatch(requestAPI());\n    const data = await quotationAPI();\n    return dispatch(recieveWalletRate(data));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default fetchQuotationToWallet;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../assets/Form.css';\nimport PropTypes from 'prop-types';\nimport fetchQuotationToWallet from '../actions/rates';\nimport { recieveWalletInfo } from '../actions';\n\nconst ali = 'Alimentação';\n\nclass Form extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: ali,\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    this.setState({\n      [target.name]: value,\n    });\n  };\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const { getWallet, getRates, handleClick } = this.props;\n    await getRates();\n    const { rates } = this.props;\n    const { id, value, description, currency, method, tag } = this.state;\n    const save = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: rates,\n    };\n    getWallet(save);\n    this.setState((before) => ({\n      id: before.id + 1,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: ali,\n    }));\n    handleClick();\n  }\n\n  render() {\n    const { curr } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <form className=\"expenses-form\" type=\"submit\" onSubmit={ this.handleSubmit }>\n        <label htmlFor=\"value-input\">\n          Valor:\n          {' '}\n          <input\n            data-testid=\"value-input\"\n            id=\"value-input\"\n            className=\"value-input\"\n            name=\"value\"\n            type=\"number\"\n            value={ value }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"description-input\">\n          Descrição:\n          {' '}\n          <input\n            data-testid=\"description-input\"\n            id=\"description-input\"\n            name=\"description\"\n            type=\"text\"\n            value={ description }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"currency-select\">\n          Moeda:\n          {' '}\n          <select\n            id=\"currency-select\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ this.handleChange }\n          >\n            {\n              curr.map((elem, index) => (\n                <option key={ index } value={ elem }>{elem}</option>\n              ))\n            }\n          </select>\n        </label>\n        <label htmlFor=\"method-input\">\n          Método de pagamento:\n          {' '}\n          <select\n            id=\"method-input\"\n            data-testid=\"method-input\"\n            value={ method }\n            onChange={ this.handleChange }\n            name=\"method\"\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"category-input\">\n          Categoria:\n          {' '}\n          <select\n            id=\"category-input\"\n            data-testid=\"tag-input\"\n            name=\"tag\"\n            value={ tag }\n            onChange={ this.handleChange }\n          >\n            <option value={ ali }>Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        <button\n          type=\"submit\"\n          className=\"submit-btn\"\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  curr: state.wallet.currencies,\n  rates: state.wallet.rates,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getRates: (state) => dispatch(fetchQuotationToWallet(state)),\n  getWallet: (wallet) => dispatch(recieveWalletInfo(wallet)),\n});\n\nForm.propTypes = {\n  curr: PropTypes.arrayOf(PropTypes.string),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../assets/Table.css';\n// import { deleteTask } from '../actions';\n\nclass Table extends Component {\n  // handleDelete = ({ target }) => {\n  //   const { delTask } = this.props;\n  //   delTask(target.value);\n  // }\n\n  render() {\n    const { expen, handleDelete } = this.props;\n    return (\n      <div className=\"table-container\">\n        <h1 className=\"title\">Despesas Totais</h1>\n        <table className=\"table\">\n          <thead className=\"table-head\">\n            <tr className=\"head-tr\">\n              <th className=\"head-td\">Descrição</th>\n              <th className=\"head-td\">Tag</th>\n              <th className=\"head-td\">Método de pagamento</th>\n              <th className=\"head-td\">Valor</th>\n              <th className=\"head-td\">Moeda</th>\n              <th className=\"head-td\">Câmbio utilizado</th>\n              <th className=\"head-td\">Valor convertido</th>\n              <th className=\"head-td\">Moeda de conversão</th>\n              <th className=\"head-td\">Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody className=\"table-body\">\n            {\n              expen.map((desp) => {\n                const valor = Number(desp.value);\n                const moeda = desp.exchangeRates[desp.currency].name;\n                const cambio = Number(desp.exchangeRates[desp.currency].ask);\n                const conv = valor * cambio;\n                return (\n                  <tr className=\"body-tr\" key={ desp.id }>\n                    <td className=\"body-td\">{ desp.description }</td>\n                    <td className=\"body-td\">{ desp.tag }</td>\n                    <td className=\"body-td center\">{ desp.method }</td>\n                    <td className=\"body-td\">{ valor.toFixed(2) }</td>\n                    <td className=\"body-td\">{ moeda }</td>\n                    <td className=\"body-td\">{ cambio.toFixed(2) }</td>\n                    <td className=\"body-td\">{ conv.toFixed(2) }</td>\n                    <td className=\"body-td\">Real</td>\n                    <td className=\"body-td\">\n                      <button\n                        type=\"button\"\n                        data-testid=\"delete-btn\"\n                        className=\"delete-btn\"\n                        value={ desp.id }\n                        onClick={ handleDelete }\n                      >\n                        Excluir\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expen: state.wallet.expenses,\n});\n\n// const mapDispatchToProps = (dispatch) => ({\n//   delTask: (tasks) => dispatch(deleteTask(tasks)),\n// });\n\nTable.propTypes = {\n  expen: PropTypes.arrayOf(PropTypes.any),\n}.isRequired;\n\nexport default connect(mapStateToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../assets/Wallet.css';\nimport fecthQuotationAPI from '../actions/wallet';\nimport Form from '../components/Form';\nimport Table from '../components/Table';\nimport { deleteTask } from '../actions';\n\nclass Wallet extends React.Component {\n  async componentDidMount() {\n    const { currencie } = this.props;\n    currencie();\n    this.changeTotal();\n  }\n\n  // Ajuste do valor atualizado sem o state do componente com o Danillo\n  changeTotal = () => {\n    const { expen } = this.props;\n    const totalDep = expen.map((elem) => {\n      const moeda = Object.values(elem.exchangeRates)\n        .filter((key) => key.code === elem.currency && key.codein !== 'BRLT');\n      return Number(moeda[0].ask * elem.value);\n    });\n    let despesaTotal = 0;\n    if (totalDep.length !== 0) {\n      for (let i = 0; i < totalDep.length; i += 1) {\n        despesaTotal += +totalDep[i];\n      }\n      return despesaTotal.toFixed(2);\n    }\n    return 0;\n  };\n\n  // Ajuda de onde fazer a função delete com o André Felipe\n  handleDelete = async ({ target }) => {\n    const { delTask } = this.props;\n    await delTask(target.value);\n    this.changeTotal();\n  }\n\n  render() {\n    const { userEmail, expen } = this.props;\n    return (\n      <>\n        <header className=\"wallet-header\">\n          <h1 className=\"wallet-title\">TrybeWallet</h1>\n          <div className=\"user-info\">\n            <p>\n              Usuário:\n              {' '}\n              <span data-testid=\"email-field\">{ userEmail }</span>\n            </p>\n            <p>\n              Despesa total:\n              {' '}\n              <span data-testid=\"total-field\">{ this.changeTotal() }</span>\n              {' '}\n              <span data-testid=\"header-currency-field\">BRL</span>\n            </p>\n          </div>\n        </header>\n        <Form handleClick={ this.changeTotal } />\n        { expen.length > 0\n        && <Table handleDelete={ this.handleDelete } /> }\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  expen: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  currencie: (state) => dispatch(fecthQuotationAPI(state)),\n  delTask: (tasks) => dispatch(deleteTask(tasks)),\n});\n\nWallet.propTypes = {\n  userEmail: PropTypes.string,\n  expen: PropTypes.arrayOf(PropTypes.any),\n  currencie: PropTypes.arrayOf(PropTypes.string),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nconst Routes = () => (\n  <Switch>\n    <Route component={ Login } path=\"/\" exact />\n    <Route component={ Wallet } path=\"/carteira\" exact />\n  </Switch>\n);\n\nexport default Routes;\n","import React, { Component } from 'react';\nimport Routes from './Routes';\n\nclass App extends Component {\n  render() {\n    return <Routes />;\n  }\n}\n\nexport default App;\n","import { RECIEVE_USER_INFO } from '../actions';\n\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n  pass: '',\n};\n\nconst userRDC = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case RECIEVE_USER_INFO:\n    return {\n      ...state,\n      email: action.email,\n      pass: action.password,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userRDC;\n","import { DELETE_TASK, RECIEVE_API_QUOTATION, RECIEVE_API_RATE,\n  RECIEVE_WALLET_INFO, REQUEST_API } from '../actions';\n\n// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst walletRDC = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_API:\n    return {\n      ...state,\n    };\n  case RECIEVE_API_QUOTATION:\n    return {\n      ...state,\n      currencies: action.curr,\n    };\n  case RECIEVE_API_RATE:\n    return {\n      ...state,\n      rates: action.rates,\n    };\n  case RECIEVE_WALLET_INFO:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.wallet],\n    };\n  case DELETE_TASK:\n    return {\n      ...state,\n      expenses: state.expenses.filter((expe) => expe.id !== action.task),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletRDC;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}